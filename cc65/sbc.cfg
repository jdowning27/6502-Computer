# This file contains a description of the hardware design
# of my computer. It will be used in the ld65 linker stage
# to ensure the memory space is configured properly. 
# This configuration is based off the example 
# given here:  https://www.cc65.org/doc/customizing-2.html



# MEMORY MAP
# ZP and RAM are subject to change if memory
# space needs to be reserved I/O drivers.

# ZP:       0x0000 - 0x00FF, 0x100
# STACK:    0x0100 - 0x01FF, 0x100
# RAM:      0x0200 - 0x6FFF, 0x6E00
# I/O:      0x7000 - 0x7FFF, 0x1000
# ROM:      0x8000 - 0xFFFF, 0x8000

# MEMORY defines how addresses that the 6502 can see relate to
# the different hardware devices
MEMORY {
    ZP:        start =    $0, size =  $100, type   = rw, define = yes;
    RAM:       start =  $200, size = $6E00, define = yes;
    ROM:       start = $8000, size = $8000, file   = %O;
}

# SEGMENTS defines how the spaces in the memory map will be devided
# in the C environment
SEGMENTS {
    ZEROPAGE:  load = ZP,  type = zp,  define   = yes;
    DATA:      load = ROM, type = rw,  define   = yes, run = RAM;
    BSS:       load = RAM, type = bss, define   = yes;
    HEAP:      load = RAM, type = bss, optional = yes;
    STARTUP:   load = ROM, type = ro;
    INIT:      load = ROM, type = ro,  optional = yes;
    CODE:      load = ROM, type = ro;
    RODATA:    load = ROM, type = ro;
    VECTORS:   load = ROM, type = ro,  start    = $FFFA;
}

# FEATURES here we are defining the constructor and destructor
# attributes for the C environment
FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

# SYMBOLS here we define the maximum stack size that is needed to 
# run our program.
SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__:  value = $0200, weak = yes;
}